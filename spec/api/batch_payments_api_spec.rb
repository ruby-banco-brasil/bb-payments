=begin
#Payments-VPN

#Esta API fornece os serviços de pagamento do Banco do Brasil.

OpenAPI spec version: 3.5

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.24
=end

require 'spec_helper'
require 'json'

# Unit tests for BancoBrasilPayments::BatchPaymentsApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'BatchPaymentsApi' do
  before do
    # run before each test
    @instance = BancoBrasilPayments::BatchPaymentsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of BatchPaymentsApi' do
    it 'should create an instance of BatchPaymentsApi' do
      expect(@instance).to be_instance_of(BancoBrasilPayments::BatchPaymentsApi)
    end
  end

  # unit tests for consula_pagamento_transferencias_lote
  # Retrieval of detailed infomation of a specific payment
  # Recupera detalhes de uma transferência específica enviada enviada pela solicitação ao recurso /batch-transfers (POST)
  # @param id Identificação de um pagamento específico para um beneficiário. NÃO é o valor do campo requestIdentification do recurso \&quot;Solicitação para transferências em lote\&quot;, mas o campo paymentId na matriz paymentsList do recurso \&quot;Recuperação de transferências em lote\&quot;.
  # @param gw_dev_app_key Chave de acesso do aplicativo do desenvolvedor. Esta chave é única e obtida no Portal “BB for Developers” e usada para identificar as requisições da aplicação do desenvolvedor.
  # @param authorization É um “token” de acesso fornecido pelo OAuth 2.0.
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse2001]
  describe 'consula_pagamento_transferencias_lote test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for consulta_transferencia_lote
  # Retrieval from transfers in batch
  # Recupera as informações da solicitação, incluindo a situação da solicitação, e a lista de pagamentos com a situação de cada pagamento da solicitação de transferências em lote. Este recurso tem um limite de 300 ocorrências por resposta.
  # @param id Identificador da requisição de pagamento. Número único, não sequencial, com domínio entre 1 e 999999999.
  # @param gw_dev_app_key Chave de acesso do aplicativo do desenvolvedor. Esta chave é única e obtida no Portal “BB for Developers” e usada para identificar as requisições da aplicação do desenvolvedor.
  # @param authorization É um “token” de acesso fornecido pelo OAuth 2.0.
  # @param [Hash] opts the optional parameters
  # @option opts [BigDecimal] :index Posição do índice. Cada resposta tem um limite de 300 ocorrências na lista paymentList, iniciada a partir do valor do índice fornecido. Para todas as ocorrências, itere sobre esse recurso usando o valor do campo nextIndex da resposta.
  # @return [InlineResponse200]
  describe 'consulta_transferencia_lote test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for envia_transferencias_lote
  # Request for transfers in batch
  # Pedido de transferências em lote de pagamento de qualquer tipo (fornecedores, salário ou diversos), por transferência bancária (incluindo outros bancos) ou por depósito judicial.  A solicitação será submetida a uma validação prévia das informações do pagador e das entradas inseridas na lista de pagamentos. Após 10 minutos, a rotina de lote será executada, para que as entradas passem por uma validação mais completa.  Além disso, com a intenção de saber definitivamente se tudo correu bem, recomenda-se que o pagador utilize o recurso /batch-transfers/ (GET)
  # @param body
  # @param authorization É um \&quot;token\&quot; de acesso fornecido pelo OAuth 2.0.
  # @param gw_dev_app_key Chave de acesso do aplicativo do desenvolvedor. Esta chave é única e obtida no Portal “BB for Developers” e usada para identificar as requisições da aplicação do desenvolvedor.
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse201]
  describe 'envia_transferencias_lote test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for lista_transferencias_lote
  # List of transfers in batch
  # Retorna uma lista de lotes de pagamentos.
  # @param gw_dev_app_key Chave de acesso do aplicativo do desenvolvedor. Esta chave é única e obtida no Portal “BB for Developers” e usada para identificar as requisições da aplicação do desenvolvedor.  Example: 0021239456d80136bebf005056891bed
  # @param authorization É um “token” de acesso fornecido pelo OAuth 2.0.  Example: Bearer [ACCESS_TOKEN]
  # @param start_date Data inicial de envio da requisição a ser pesquisada (formato: ddmmaaaa)
  # @param end_date Data final de envio da requisição a ser pesquisada (formato: ddmmaaaa)
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :payment_contract Contrato de pagamento entre o terceiro e o Banco do Brasil. Opcionalmente, quando não informado, será considerado o contrato vinculado à identificação interna do cliente.
  # @option opts [Integer] :debit_branch_office Código da agência para débito. Não é necessário quando a solicitação é acessada pelo código de autorização no fluxo do OAuth.
  # @option opts [Integer] :debit_current_account Conta corrente de débito. Não é necessário quando a solicitação é acessada pelo código de autorização no fluxo do OAuth.
  # @option opts [String] :check_digits_debit_current_account Dígito do verificador da conta corrente para débito. Não é necessário quando a solicitação é acessada pelo código de autorização no fluxo do OAuth.
  # @option opts [Integer] :payment_type A modalidade que representa o tipo de pagamento, descrita a seguir: 126 significa pagamento de fornecedores; 127 significa pagamento de salário; 128 significa pagamento diverso.
  # @option opts [Integer] :request_status Código do estado da requisição a ser pesquisada: 1 - Requisição com todos os lançamentos com dados consistentes;  2 - Requisição com ao menos um dos lançamentos com dados inconsistentes; 3 - Requisição com todos os lançamentos com dados inconsistentes;  4 - Requisição pendente de ação pelo Conveniado - falta autorizar o pagamento;  5 - Requisição em processamento pelo Banco;  6 - Requisição Processada;  7 - Requisição Rejeitada,  8 - Preparando remessa não liberada,  9 - Requisição liberada via API,  10 -  Preparando remessa liberada.   As situações 1, 2 e 8 são transitórias e não requerem qualquer ação do Cliente Conveniado. situação 3 sempre será migrada para situação 7.  A situação 4 Significa que, ao menos um lançamento, depende de ação do Cliente Conveniado, seja liberando ou cancelando os pagamentos.  As situações 5, 6, 7, 9 e 10 não requerem qualquer ação do Cliente Conveniado. A situação 5 significa que, ao menos um lançamento, está agendado.  As situações 6 e 7 são definitivas não havendo alteração posterior da situação da requisição.
  # @option opts [Integer] :index Posição do índice de paginação.  Indica a posição a partir da qual a pesquisa tratá os registros (ex: valor 0, indica que está trazendo a partir do registro 1, valor 300 indica que está trazendo a partir do 301). Cada resposta tem um limite de 300 ocorrências na lista paymentList, iniciada a partir do valor do índice fornecido. Para todas as ocorrências, itere sobre esse recurso usando o valor do campo nextIndex da resposta
  # @return [RootTypeForBatchTransferGETResponseObject]
  describe 'lista_transferencias_lote test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for sondagem_transferencia_lote
  # Checks a transfers in batch request
  # Verifica se a requisição ao recurso Transfers in Batch foi bem-sucedida ao se registrar no sistema de pagamento do Banco do Brasil.  O requestresource (Transfers in Batch) faz uma validação referente ao solicitante do pagamento e às entradasfornecidas na requisição. Após 10 minutos, quando a rotina em lote é executada, o cliente deve verificar o resultado para ver se algum outro ponto de inconsistência foi encontrado. Além disso, após a data de pagamento informada, o cliente deve consultar novamente a solicitação de pagamento para saber definitivamente se tudo correu bem.
  # @param id Identificador da requisição de pagamento. Número único, não sequencial, controlado pelo cliente, com domínio entre 1 e 999999999.
  # @param gw_dev_app_key Chave de acesso do aplicativo do desenvolvedor. Esta chave é única e obtida no Portal “BB for Developers” e usada para identificar as requisições da aplicação do desenvolvedor.
  # @param authorization É um “token” de acesso fornecido pelo OAuth 2.0.
  # @param [Hash] opts the optional parameters
  # @return [InlineResponse2002]
  describe 'sondagem_transferencia_lote test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end

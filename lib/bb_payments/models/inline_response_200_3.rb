=begin
#Payments-VPN

#Esta API fornece os serviços de pagamento do Banco do Brasil.

OpenAPI spec version: 3.5

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.24
=end

require 'date'

module BancoBrasilPayments
  # Representação dos campos de resposta de uma solicitação de detalhamento de pagamento de boleto.
  class InlineResponse2003
    # Numero identificador do pagamento consultado.
    attr_accessor :id

    # Descrição da situação do pagamento: Domínios: - Consistente (pagamento recebido pelo banco, cumprem as regras de preenchimento dos campos mas ainda irá para validação e processamento) - Inconsistente (pagamento não aceito pelo banco por dados de entrada inconsistentes - não cumpre as regras de preenchimento dos campos) - Pago (pagamento efetuado ao favorecido) - Pendente (pagamento validado - pendência de autorização do pagamento por parte do pagador) - Aguardando saldo (débito não efetivado e em verificação de saldo até o horário limite da teimosinha). - Agendado (pagamento autorizado, porém aguardando a data de efetivação do pagamento ou horário de processamento) - Rejeitado (dados do pagamento não passaram na validações físicas e/ou lógicas, precisam ser corrigidos e reenviados. Ex: agência e conta não existem, conta não pertence ao CPF informado) - Cancelado (pagamento cancelado pelo pagador antes da data de efetivação do crédito) - Bloqueado (Débito na conta do pagador não efetivado por ocorrência no convênio, inconsistência de data/float ou falta de saldo) - Devolvido (pagamento efetuado e posteriormente devolvido pelo favorecido ou instituição recebedora. O valor é devolvido para a conta corrente onde ocorreu o débito da requisição)\" - Debitado (pagamento debitado na conta do pagador e pendente de crédito ao favorecido)
    attr_accessor :estado_pagamento

    # Código do tipo de pagamento efetuado: DOMÍNIOS: 126=Pagamento a Fornecedores;  127=Pagamento de Salários;  128=Pagamentos Diversos
    attr_accessor :tipo_pagamento

    # Número da agência da Conta Corrente onde foi efetuado o débito para efetivação do pagamento consultado.
    attr_accessor :agencia_debito

    # Número da Conta Corrente onde foi efetuado o débito para efetivação do pagamento consultado.
    attr_accessor :conta_debito

    # Digito verificador da Conta corrente onde foi efetuado o débito para efetivação do pagamento consultado.
    attr_accessor :digito_conta_debito

    # Primeiros 4 numeros do cartao de credito do pagador, caso o debito tenha sido feito nele.
    attr_accessor :numero_cartao_inicio

    # Ultimos 4 numeros do cartao de credito do pagador, caso o debito tenha sido feito nele.
    attr_accessor :numero_cartao_fim

    # Numero sequencial da requisição que solicitou o pagamento do lançamento consultado. Nº único  controlada pelo cliente conveniado.
    attr_accessor :requisicao_pagamento

    # Numero do arquivo que o cliente envia quando utilizado CNAB240.
    attr_accessor :arquivo_pagamento

    # Data efetiva do pagamento (formato ddmmaaaa)
    attr_accessor :data_pagamento

    # Valor total do pagamento (formato 0.00)
    attr_accessor :valor_pagamento

    # Numero do documento de debito exibido no extrato do pagador.
    attr_accessor :numero_documento_debito

    # Código da Forma de transmissão de envio do lançamento consultado. DOMÍNIOS: 1 - API 2 - Arquivo CNAB 3 - Pagamento Online via Gerenciador Financeiro 4 - Sistemas Internos 99 - Outros
    attr_accessor :codigo_transmissao

    # Campo livre informado pelo pagador quando do envio do lançamento consultado – sem tratamento pelo Banco.
    attr_accessor :descricao_pagamento

    # Código de autenticação do pagamento.
    attr_accessor :autenticacao_pagamento

    # Quantidade de ocorrências de devoluções.
    attr_accessor :quantidade_ocorrencia_devolucao

    # \"Quando valor = 1 indica que o identificador consultado é de boleto.  Quando valor = 0 indica que o identificador consultado NÃO é de boleto.  Para consulta ao detalhamento do identificador informado utilize o recurso de detalhamento do tipo de pagamento a ser consultado.\" 
    attr_accessor :ocorrencia_boleto

    # Lista de devoluções.
    attr_accessor :lista_devolucao

    # Lista de boletos.
    attr_accessor :lista_boleto

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'estado_pagamento' => :'estadoPagamento',
        :'tipo_pagamento' => :'tipoPagamento',
        :'agencia_debito' => :'agenciaDebito',
        :'conta_debito' => :'contaDebito',
        :'digito_conta_debito' => :'digitoContaDebito',
        :'numero_cartao_inicio' => :'numeroCartaoInicio',
        :'numero_cartao_fim' => :'numeroCartaoFim',
        :'requisicao_pagamento' => :'requisicaoPagamento',
        :'arquivo_pagamento' => :'arquivoPagamento',
        :'data_pagamento' => :'dataPagamento',
        :'valor_pagamento' => :'valorPagamento',
        :'numero_documento_debito' => :'numeroDocumentoDebito',
        :'codigo_transmissao' => :'codigoTransmissao',
        :'descricao_pagamento' => :'descricaoPagamento',
        :'autenticacao_pagamento' => :'autenticacaoPagamento',
        :'quantidade_ocorrencia_devolucao' => :'quantidadeOcorrenciaDevolucao',
        :'ocorrencia_boleto' => :'ocorrenciaBoleto',
        :'lista_devolucao' => :'listaDevolucao',
        :'lista_boleto' => :'listaBoleto'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'Object',
        :'estado_pagamento' => :'Object',
        :'tipo_pagamento' => :'Object',
        :'agencia_debito' => :'Object',
        :'conta_debito' => :'Object',
        :'digito_conta_debito' => :'Object',
        :'numero_cartao_inicio' => :'Object',
        :'numero_cartao_fim' => :'Object',
        :'requisicao_pagamento' => :'Object',
        :'arquivo_pagamento' => :'Object',
        :'data_pagamento' => :'Object',
        :'valor_pagamento' => :'Object',
        :'numero_documento_debito' => :'Object',
        :'codigo_transmissao' => :'Object',
        :'descricao_pagamento' => :'Object',
        :'autenticacao_pagamento' => :'Object',
        :'quantidade_ocorrencia_devolucao' => :'Object',
        :'ocorrencia_boleto' => :'Object',
        :'lista_devolucao' => :'Object',
        :'lista_boleto' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `BancoBrasilPayments::InlineResponse2003` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `BancoBrasilPayments::InlineResponse2003`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'estado_pagamento')
        self.estado_pagamento = attributes[:'estado_pagamento']
      end

      if attributes.key?(:'tipo_pagamento')
        self.tipo_pagamento = attributes[:'tipo_pagamento']
      end

      if attributes.key?(:'agencia_debito')
        self.agencia_debito = attributes[:'agencia_debito']
      end

      if attributes.key?(:'conta_debito')
        self.conta_debito = attributes[:'conta_debito']
      end

      if attributes.key?(:'digito_conta_debito')
        self.digito_conta_debito = attributes[:'digito_conta_debito']
      end

      if attributes.key?(:'numero_cartao_inicio')
        self.numero_cartao_inicio = attributes[:'numero_cartao_inicio']
      end

      if attributes.key?(:'numero_cartao_fim')
        self.numero_cartao_fim = attributes[:'numero_cartao_fim']
      end

      if attributes.key?(:'requisicao_pagamento')
        self.requisicao_pagamento = attributes[:'requisicao_pagamento']
      end

      if attributes.key?(:'arquivo_pagamento')
        self.arquivo_pagamento = attributes[:'arquivo_pagamento']
      end

      if attributes.key?(:'data_pagamento')
        self.data_pagamento = attributes[:'data_pagamento']
      end

      if attributes.key?(:'valor_pagamento')
        self.valor_pagamento = attributes[:'valor_pagamento']
      end

      if attributes.key?(:'numero_documento_debito')
        self.numero_documento_debito = attributes[:'numero_documento_debito']
      end

      if attributes.key?(:'codigo_transmissao')
        self.codigo_transmissao = attributes[:'codigo_transmissao']
      end

      if attributes.key?(:'descricao_pagamento')
        self.descricao_pagamento = attributes[:'descricao_pagamento']
      end

      if attributes.key?(:'autenticacao_pagamento')
        self.autenticacao_pagamento = attributes[:'autenticacao_pagamento']
      end

      if attributes.key?(:'quantidade_ocorrencia_devolucao')
        self.quantidade_ocorrencia_devolucao = attributes[:'quantidade_ocorrencia_devolucao']
      end

      if attributes.key?(:'ocorrencia_boleto')
        self.ocorrencia_boleto = attributes[:'ocorrencia_boleto']
      end

      if attributes.key?(:'lista_devolucao')
        if (value = attributes[:'lista_devolucao']).is_a?(Array)
          self.lista_devolucao = value
        end
      end

      if attributes.key?(:'lista_boleto')
        if (value = attributes[:'lista_boleto']).is_a?(Array)
          self.lista_boleto = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @estado_pagamento.nil?
        invalid_properties.push('invalid value for "estado_pagamento", estado_pagamento cannot be nil.')
      end

      if @tipo_pagamento.nil?
        invalid_properties.push('invalid value for "tipo_pagamento", tipo_pagamento cannot be nil.')
      end

      if @agencia_debito.nil?
        invalid_properties.push('invalid value for "agencia_debito", agencia_debito cannot be nil.')
      end

      if @conta_debito.nil?
        invalid_properties.push('invalid value for "conta_debito", conta_debito cannot be nil.')
      end

      if @digito_conta_debito.nil?
        invalid_properties.push('invalid value for "digito_conta_debito", digito_conta_debito cannot be nil.')
      end

      if @numero_cartao_inicio.nil?
        invalid_properties.push('invalid value for "numero_cartao_inicio", numero_cartao_inicio cannot be nil.')
      end

      if @numero_cartao_fim.nil?
        invalid_properties.push('invalid value for "numero_cartao_fim", numero_cartao_fim cannot be nil.')
      end

      if @requisicao_pagamento.nil?
        invalid_properties.push('invalid value for "requisicao_pagamento", requisicao_pagamento cannot be nil.')
      end

      if @arquivo_pagamento.nil?
        invalid_properties.push('invalid value for "arquivo_pagamento", arquivo_pagamento cannot be nil.')
      end

      if @data_pagamento.nil?
        invalid_properties.push('invalid value for "data_pagamento", data_pagamento cannot be nil.')
      end

      if @valor_pagamento.nil?
        invalid_properties.push('invalid value for "valor_pagamento", valor_pagamento cannot be nil.')
      end

      if @numero_documento_debito.nil?
        invalid_properties.push('invalid value for "numero_documento_debito", numero_documento_debito cannot be nil.')
      end

      if @codigo_transmissao.nil?
        invalid_properties.push('invalid value for "codigo_transmissao", codigo_transmissao cannot be nil.')
      end

      if @descricao_pagamento.nil?
        invalid_properties.push('invalid value for "descricao_pagamento", descricao_pagamento cannot be nil.')
      end

      if @autenticacao_pagamento.nil?
        invalid_properties.push('invalid value for "autenticacao_pagamento", autenticacao_pagamento cannot be nil.')
      end

      if @quantidade_ocorrencia_devolucao.nil?
        invalid_properties.push('invalid value for "quantidade_ocorrencia_devolucao", quantidade_ocorrencia_devolucao cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @id.nil?
      return false if @estado_pagamento.nil?
      return false if @tipo_pagamento.nil?
      return false if @agencia_debito.nil?
      return false if @conta_debito.nil?
      return false if @digito_conta_debito.nil?
      return false if @numero_cartao_inicio.nil?
      return false if @numero_cartao_fim.nil?
      return false if @requisicao_pagamento.nil?
      return false if @arquivo_pagamento.nil?
      return false if @data_pagamento.nil?
      return false if @valor_pagamento.nil?
      return false if @numero_documento_debito.nil?
      return false if @codigo_transmissao.nil?
      return false if @descricao_pagamento.nil?
      return false if @autenticacao_pagamento.nil?
      return false if @quantidade_ocorrencia_devolucao.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          estado_pagamento == o.estado_pagamento &&
          tipo_pagamento == o.tipo_pagamento &&
          agencia_debito == o.agencia_debito &&
          conta_debito == o.conta_debito &&
          digito_conta_debito == o.digito_conta_debito &&
          numero_cartao_inicio == o.numero_cartao_inicio &&
          numero_cartao_fim == o.numero_cartao_fim &&
          requisicao_pagamento == o.requisicao_pagamento &&
          arquivo_pagamento == o.arquivo_pagamento &&
          data_pagamento == o.data_pagamento &&
          valor_pagamento == o.valor_pagamento &&
          numero_documento_debito == o.numero_documento_debito &&
          codigo_transmissao == o.codigo_transmissao &&
          descricao_pagamento == o.descricao_pagamento &&
          autenticacao_pagamento == o.autenticacao_pagamento &&
          quantidade_ocorrencia_devolucao == o.quantidade_ocorrencia_devolucao &&
          ocorrencia_boleto == o.ocorrencia_boleto &&
          lista_devolucao == o.lista_devolucao &&
          lista_boleto == o.lista_boleto
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, estado_pagamento, tipo_pagamento, agencia_debito, conta_debito, digito_conta_debito, numero_cartao_inicio, numero_cartao_fim, requisicao_pagamento, arquivo_pagamento, data_pagamento, valor_pagamento, numero_documento_debito, codigo_transmissao, descricao_pagamento, autenticacao_pagamento, quantidade_ocorrencia_devolucao, ocorrencia_boleto, lista_devolucao, lista_boleto].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        BancoBrasilPayments.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end

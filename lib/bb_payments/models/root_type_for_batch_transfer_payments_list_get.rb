=begin
#Payments-VPN

#Esta API fornece os serviços de pagamento do Banco do Brasil.

OpenAPI spec version: 3.5

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.24
=end

require 'date'

module BancoBrasilPayments
  # Lista de pagamentos para recurso GET Batch Transfers
  class RootTypeForBatchTransferPaymentsListGET
    # ID sequencial da requisição
    attr_accessor :sequential_request_id

    # Texto de uso livre do cliente.
    attr_accessor :request_payment_message

    # Código do estado da requisição a ser pesquisada: 1 - Requisição com todos os lançamentos com dados consistentes;  2 - Requisição com ao menos um dos lançamentos com dados inconsistentes; 3 - Requisição com todos os lançamentos com dados inconsistentes;  4 - Requisição pendente de ação pelo Conveniado - falta autorizar o pagamento;  5 - Requisição em processamento pelo Banco;  6 - Requisição Processada;  7 - Requisição Rejeitada,  8 - Preparando remessa não liberada,  9 - Requisição liberada via API,  10 -  Preparando remessa liberada.   As situações 1, 2 e 8 são transitórias e não requerem qualquer ação do Cliente Conveniado. situação 3 sempre será migrada para situação 7.  A situação 4 Significa que, ao menos um lançamento, depende de ação do Cliente Conveniado, seja liberando ou cancelando os pagamentos.  As situações 5, 6, 7, 9 e 10 não requerem qualquer ação do Cliente Conveniado. A situação 5 significa que, ao menos um lançamento, está agendado.  As situações 6 e 7 são definitivas não havendo alteração posterior da situação da requisição.
    attr_accessor :request_status

    # Código da agência para débito.
    attr_accessor :debit_branch_office

    # Conta corrente de débito.
    attr_accessor :debit_current_account

    # Dígito do verificador da conta corrente para débito.
    attr_accessor :check_digits_debit_current_account

    # Data em que o cliente enviou ao banco a requisição de pagamento (formato ddmmaaaa). Solicitações de pagamentos para dias não úteis ou após o horário limite de processamento serão pagas no próximo dia útil, com exceção de transferências entre contas do Banco do Brasil
    attr_accessor :request_date

    # Hora do envio da requisição do envio do lote
    attr_accessor :request_sent_hour

    # Modalidade que representa o tipo de pagamento, sendo: 126 pagamento de fornecedores; 127 pagamento de salário e 128 pagamentos diversos
    attr_accessor :payment_type

    # Identificação do usuário que enviou a requisição
    attr_accessor :user_id

    # Nome do responsável pelo envio do lote. (para casos de login e explícito)
    attr_accessor :user_name

    # Quantidade total de boletos
    attr_accessor :bankpayment_quantity

    # Valor do pagamento em reais (formato 0.00)
    attr_accessor :bankpayment_amount

    # Quantidade total de todos os pagamentos pretendidos válidos a serem processados em lote
    attr_accessor :valid_bankpayment_quantity

    # Valor total de todos os pagamentos pretendidos válidos a serem processados em lote (formato 0.00)
    attr_accessor :valid_bankpayment_amount

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'sequential_request_id' => :'sequentialRequestID',
        :'request_payment_message' => :'requestPaymentMessage',
        :'request_status' => :'requestStatus',
        :'debit_branch_office' => :'debitBranchOffice',
        :'debit_current_account' => :'debitCurrentAccount',
        :'check_digits_debit_current_account' => :'checkDigitsDebitCurrentAccount',
        :'request_date' => :'requestDate',
        :'request_sent_hour' => :'requestSentHour',
        :'payment_type' => :'paymentType',
        :'user_id' => :'userID',
        :'user_name' => :'userName',
        :'bankpayment_quantity' => :'bankpaymentQuantity',
        :'bankpayment_amount' => :'bankpaymentAmount',
        :'valid_bankpayment_quantity' => :'validBankpaymentQuantity',
        :'valid_bankpayment_amount' => :'validBankpaymentAmount'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'sequential_request_id' => :'Object',
        :'request_payment_message' => :'Object',
        :'request_status' => :'Object',
        :'debit_branch_office' => :'Object',
        :'debit_current_account' => :'Object',
        :'check_digits_debit_current_account' => :'Object',
        :'request_date' => :'Object',
        :'request_sent_hour' => :'Object',
        :'payment_type' => :'Object',
        :'user_id' => :'Object',
        :'user_name' => :'Object',
        :'bankpayment_quantity' => :'Object',
        :'bankpayment_amount' => :'Object',
        :'valid_bankpayment_quantity' => :'Object',
        :'valid_bankpayment_amount' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `BancoBrasilPayments::RootTypeForBatchTransferPaymentsListGET` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `BancoBrasilPayments::RootTypeForBatchTransferPaymentsListGET`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'sequential_request_id')
        self.sequential_request_id = attributes[:'sequential_request_id']
      end

      if attributes.key?(:'request_payment_message')
        self.request_payment_message = attributes[:'request_payment_message']
      end

      if attributes.key?(:'request_status')
        self.request_status = attributes[:'request_status']
      end

      if attributes.key?(:'debit_branch_office')
        self.debit_branch_office = attributes[:'debit_branch_office']
      end

      if attributes.key?(:'debit_current_account')
        self.debit_current_account = attributes[:'debit_current_account']
      end

      if attributes.key?(:'check_digits_debit_current_account')
        self.check_digits_debit_current_account = attributes[:'check_digits_debit_current_account']
      end

      if attributes.key?(:'request_date')
        self.request_date = attributes[:'request_date']
      end

      if attributes.key?(:'request_sent_hour')
        self.request_sent_hour = attributes[:'request_sent_hour']
      end

      if attributes.key?(:'payment_type')
        self.payment_type = attributes[:'payment_type']
      end

      if attributes.key?(:'user_id')
        self.user_id = attributes[:'user_id']
      end

      if attributes.key?(:'user_name')
        self.user_name = attributes[:'user_name']
      end

      if attributes.key?(:'bankpayment_quantity')
        self.bankpayment_quantity = attributes[:'bankpayment_quantity']
      end

      if attributes.key?(:'bankpayment_amount')
        self.bankpayment_amount = attributes[:'bankpayment_amount']
      end

      if attributes.key?(:'valid_bankpayment_quantity')
        self.valid_bankpayment_quantity = attributes[:'valid_bankpayment_quantity']
      end

      if attributes.key?(:'valid_bankpayment_amount')
        self.valid_bankpayment_amount = attributes[:'valid_bankpayment_amount']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          sequential_request_id == o.sequential_request_id &&
          request_payment_message == o.request_payment_message &&
          request_status == o.request_status &&
          debit_branch_office == o.debit_branch_office &&
          debit_current_account == o.debit_current_account &&
          check_digits_debit_current_account == o.check_digits_debit_current_account &&
          request_date == o.request_date &&
          request_sent_hour == o.request_sent_hour &&
          payment_type == o.payment_type &&
          user_id == o.user_id &&
          user_name == o.user_name &&
          bankpayment_quantity == o.bankpayment_quantity &&
          bankpayment_amount == o.bankpayment_amount &&
          valid_bankpayment_quantity == o.valid_bankpayment_quantity &&
          valid_bankpayment_amount == o.valid_bankpayment_amount
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [sequential_request_id, request_payment_message, request_status, debit_branch_office, debit_current_account, check_digits_debit_current_account, request_date, request_sent_hour, payment_type, user_id, user_name, bankpayment_quantity, bankpayment_amount, valid_bankpayment_quantity, valid_bankpayment_amount].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        BancoBrasilPayments.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end

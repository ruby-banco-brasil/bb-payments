=begin
#Payments-VPN

#Esta API fornece os serviços de pagamento do Banco do Brasil.

OpenAPI spec version: 3.5

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.24
=end

require 'date'

module BancoBrasilPayments
  # Objeto de detalhamento de Boletos para o recurso Batch Slips (Pagamento de boletos em lote)
  class RootTypeForSlipsDetailsObject
    # Código identificador do pagamento.
    attr_accessor :slip_id

    # Data em que deverá ser efetivado o pagamento do boleto (formato: ddmmaaaa). Campo Obrigatório. Agendamentos poderão ser afetuados para até 180 dias
    attr_accessor :payment_date

    # Valor do pagamento do boleto (formato 0.00). Campo Obrigatório
    attr_accessor :payment_value

    # Código de barras numérico do boleto. Campo obrigatório
    attr_accessor :numeric_bar_code

    # Data de vencimento do boleto (formato: ddmmaaaa). Campo Obrigatório
    attr_accessor :due_date

    # Valor de registro do boleto, sem descontos ou multas (formato 0.00). Campo Obrigatório
    attr_accessor :bank_slip_value

    # Valor do desconto ou do abatimento do boleto ou do desconto + abatimento (formato 0.00)
    attr_accessor :discount_value

    # Valor do juros ou de mora ou multa ou juros + mora+ multa, adicionado valor do boleto (formato 0.00)
    attr_accessor :late_payment_value

    # Número indicado no boleto no campo Nosso Número, no formato STRING, com 20 dígitos. Ex:  31285570000088000
    attr_accessor :our_number

    # Nº de uso livre pelo cliente conveniado. Equivalente ao Seu Número (Limitado a 20 caracteres).
    attr_accessor :your_number

    # Identifica o tipo de pessoa, como: 1 - Pessoa física 2 - Pessoa Jurídica.
    attr_accessor :payer_taxpayer_type

    # CPF ou CNPJ do pagador.
    attr_accessor :payer_taxpayer_registration

    # Identifica o tipo de pessoa, como: 1 - Pessoa física 2 - Pessoa Jurídica.
    attr_accessor :beneficiary_taxpayer_type

    # CPF ou CNPJ do beneficiário no pagamento.
    attr_accessor :beneficiary_taxpayer_registration

    # Identifica o tipo de pessoa, como: 1 - Pessoa física 2 - Pessoa Jurídica.
    attr_accessor :guarantor_taxpayer_type

    # CPF ou CNPJ do avalista.
    attr_accessor :guarantor_taxpayer_registration

    # Descrição do pagamento de Boletos. Pode ser preenchido livremente pelo cliente como forma de identificação para o pagamento.
    attr_accessor :client_description

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'slip_id' => :'slipID',
        :'payment_date' => :'paymentDate',
        :'payment_value' => :'paymentValue',
        :'numeric_bar_code' => :'numericBarCode',
        :'due_date' => :'dueDate',
        :'bank_slip_value' => :'bankSlipValue',
        :'discount_value' => :'discountValue',
        :'late_payment_value' => :'latePaymentValue',
        :'our_number' => :'ourNumber',
        :'your_number' => :'yourNumber',
        :'payer_taxpayer_type' => :'payerTaxpayerType',
        :'payer_taxpayer_registration' => :'payerTaxpayerRegistration',
        :'beneficiary_taxpayer_type' => :'beneficiaryTaxpayerType',
        :'beneficiary_taxpayer_registration' => :'beneficiaryTaxpayerRegistration',
        :'guarantor_taxpayer_type' => :'guarantorTaxpayerType',
        :'guarantor_taxpayer_registration' => :'guarantorTaxpayerRegistration',
        :'client_description' => :'clientDescription'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'slip_id' => :'Object',
        :'payment_date' => :'Object',
        :'payment_value' => :'Object',
        :'numeric_bar_code' => :'Object',
        :'due_date' => :'Object',
        :'bank_slip_value' => :'Object',
        :'discount_value' => :'Object',
        :'late_payment_value' => :'Object',
        :'our_number' => :'Object',
        :'your_number' => :'Object',
        :'payer_taxpayer_type' => :'Object',
        :'payer_taxpayer_registration' => :'Object',
        :'beneficiary_taxpayer_type' => :'Object',
        :'beneficiary_taxpayer_registration' => :'Object',
        :'guarantor_taxpayer_type' => :'Object',
        :'guarantor_taxpayer_registration' => :'Object',
        :'client_description' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `BancoBrasilPayments::RootTypeForSlipsDetailsObject` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `BancoBrasilPayments::RootTypeForSlipsDetailsObject`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'slip_id')
        self.slip_id = attributes[:'slip_id']
      end

      if attributes.key?(:'payment_date')
        self.payment_date = attributes[:'payment_date']
      end

      if attributes.key?(:'payment_value')
        self.payment_value = attributes[:'payment_value']
      end

      if attributes.key?(:'numeric_bar_code')
        self.numeric_bar_code = attributes[:'numeric_bar_code']
      end

      if attributes.key?(:'due_date')
        self.due_date = attributes[:'due_date']
      end

      if attributes.key?(:'bank_slip_value')
        self.bank_slip_value = attributes[:'bank_slip_value']
      end

      if attributes.key?(:'discount_value')
        self.discount_value = attributes[:'discount_value']
      end

      if attributes.key?(:'late_payment_value')
        self.late_payment_value = attributes[:'late_payment_value']
      end

      if attributes.key?(:'our_number')
        self.our_number = attributes[:'our_number']
      end

      if attributes.key?(:'your_number')
        self.your_number = attributes[:'your_number']
      end

      if attributes.key?(:'payer_taxpayer_type')
        self.payer_taxpayer_type = attributes[:'payer_taxpayer_type']
      end

      if attributes.key?(:'payer_taxpayer_registration')
        self.payer_taxpayer_registration = attributes[:'payer_taxpayer_registration']
      end

      if attributes.key?(:'beneficiary_taxpayer_type')
        self.beneficiary_taxpayer_type = attributes[:'beneficiary_taxpayer_type']
      end

      if attributes.key?(:'beneficiary_taxpayer_registration')
        self.beneficiary_taxpayer_registration = attributes[:'beneficiary_taxpayer_registration']
      end

      if attributes.key?(:'guarantor_taxpayer_type')
        self.guarantor_taxpayer_type = attributes[:'guarantor_taxpayer_type']
      end

      if attributes.key?(:'guarantor_taxpayer_registration')
        self.guarantor_taxpayer_registration = attributes[:'guarantor_taxpayer_registration']
      end

      if attributes.key?(:'client_description')
        self.client_description = attributes[:'client_description']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @payment_date.nil?
        invalid_properties.push('invalid value for "payment_date", payment_date cannot be nil.')
      end

      if @payment_value.nil?
        invalid_properties.push('invalid value for "payment_value", payment_value cannot be nil.')
      end

      if @numeric_bar_code.nil?
        invalid_properties.push('invalid value for "numeric_bar_code", numeric_bar_code cannot be nil.')
      end

      if @due_date.nil?
        invalid_properties.push('invalid value for "due_date", due_date cannot be nil.')
      end

      if @bank_slip_value.nil?
        invalid_properties.push('invalid value for "bank_slip_value", bank_slip_value cannot be nil.')
      end

      if @beneficiary_taxpayer_type.nil?
        invalid_properties.push('invalid value for "beneficiary_taxpayer_type", beneficiary_taxpayer_type cannot be nil.')
      end

      if @beneficiary_taxpayer_registration.nil?
        invalid_properties.push('invalid value for "beneficiary_taxpayer_registration", beneficiary_taxpayer_registration cannot be nil.')
      end

      if @client_description.nil?
        invalid_properties.push('invalid value for "client_description", client_description cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @payment_date.nil?
      return false if @payment_value.nil?
      return false if @numeric_bar_code.nil?
      return false if @due_date.nil?
      return false if @bank_slip_value.nil?
      return false if @beneficiary_taxpayer_type.nil?
      return false if @beneficiary_taxpayer_registration.nil?
      return false if @client_description.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          slip_id == o.slip_id &&
          payment_date == o.payment_date &&
          payment_value == o.payment_value &&
          numeric_bar_code == o.numeric_bar_code &&
          due_date == o.due_date &&
          bank_slip_value == o.bank_slip_value &&
          discount_value == o.discount_value &&
          late_payment_value == o.late_payment_value &&
          our_number == o.our_number &&
          your_number == o.your_number &&
          payer_taxpayer_type == o.payer_taxpayer_type &&
          payer_taxpayer_registration == o.payer_taxpayer_registration &&
          beneficiary_taxpayer_type == o.beneficiary_taxpayer_type &&
          beneficiary_taxpayer_registration == o.beneficiary_taxpayer_registration &&
          guarantor_taxpayer_type == o.guarantor_taxpayer_type &&
          guarantor_taxpayer_registration == o.guarantor_taxpayer_registration &&
          client_description == o.client_description
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [slip_id, payment_date, payment_value, numeric_bar_code, due_date, bank_slip_value, discount_value, late_payment_value, our_number, your_number, payer_taxpayer_type, payer_taxpayer_registration, beneficiary_taxpayer_type, beneficiary_taxpayer_registration, guarantor_taxpayer_type, guarantor_taxpayer_registration, client_description].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        BancoBrasilPayments.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end

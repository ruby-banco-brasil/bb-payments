=begin
#Payments-VPN

#Esta API fornece os serviços de pagamento do Banco do Brasil.

OpenAPI spec version: 3.5

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.24
=end

require 'date'

module BancoBrasilPayments
  # Objeto de Detalhes dos pagamentos devolvidos
  class RootTypeForReturnedPaymentsDetails
    # Código identificador do pagamento.
    attr_accessor :payment_id

    # Modalidade que representa o tipo de pagamento, sendo: 126 pagamento de fornecedores; 127 pagamento de salário e 128 pagamentos diversos
    attr_accessor :payment_type

    # A modalidade que representa a maneira como o crédito foi dado, descrito a seguir: 1 significa Crédito em Conta Corrente; 3 significa DOC ou TED; 5 significa Crédito em Conta Poupança; 13 significa Liquidação de Guia com Código de Barra; 21 significa Liquidação de Guia sem Código de Barra; 30 significa Liquidação de Boleto Bancário; 31 significa Liquidação de Papéis Diversos; 71 significa Depósito Judicial.
    attr_accessor :credit_type

    # Data do pagamento (formato ddmmaaaa). Solicitações de pagamentos para dias não úteis ou após o horário limite de processamento serão pagas no próximo dia útil, com exceção de transferências entre contas do Banco do Brasil
    attr_accessor :payment_date

    # Código de identificação da instituição para crédito na câmara de compensação (no Brasil, identificado pela sigla COMPE). Por exemplo, valor 1 para o Banco do Brasil e valor 104 para a Caixa Econômica Federal. Se o valor 0 for informado, o campo ispbCode será considerado.
    attr_accessor :clearinghouse_code

    # Código identificador do Sistema de Pagamento Brasileiro (Identificado pelo acrônimo ISPB) para crédito. Por exemplo, valor 0 para o Banco do Brasil e valor 360305 para a Caixa Econômica Federal. Não considerado quando o campo clearinghouse é informado.
    attr_accessor :ispb_code

    # Código da agência para crédito.
    attr_accessor :credit_branch_office

    # Conta corrente para crédito. Não informado quando se trata de depósito judicial.
    attr_accessor :credit_current_account

    # Dígito verificador da conta corrente para crédito. Não informado quando se trata de depósito judicial. 
    attr_accessor :check_digits_credit_current_account

    # Conta corrente para pagamento.
    attr_accessor :payment_current_account

    # Identifica o tipo de beneficiário, como: 1 - Pessoa física 2 - Pessoa Jurídica.
    attr_accessor :payer_taxpayer_type

    # CPF ou CNPJ do pagador.
    attr_accessor :payer_taxpayer_registration

    # Nome da pessoa ou empresa beneficiária no pagamento 
    attr_accessor :beneficiary_name

    # Valor pago em reais (formato 0.00)
    attr_accessor :paid_value

    # Define o código de barras numérico do pagamento.
    attr_accessor :numeric_bar_code

    # Valor do pagamento em reais (formato 0.00)
    attr_accessor :payment_value

    # Identificação da solicitação de pagamento. É um número único, não sequencial, controlado pelo cliente, cujo valor vai de 1 a 999999.
    attr_accessor :request_identification

    # Código da agência para débito.
    attr_accessor :debit_branch_office

    # Conta corrente de débito.
    attr_accessor :debit_current_account

    # Dígito do verificador da conta corrente para débito.
    attr_accessor :check_digits_debit_current_account

    # Quatro primeiros números do cartão de crédito utilizado para pagamento (pagamento devolvido)
    attr_accessor :credit_card_first_four_digits_start

    # Quatro últimos números do cartão de crédito utilizado para pagamento (pagamento devolvido)
    attr_accessor :credit_card_last_four_digits_end

    # Documento de débito.
    attr_accessor :debit_document

    # Data da devolução do pagamento pelo Beneficiário (formato ddmmaaaa)
    attr_accessor :returned_date

    # Valor da devolução do pagamento pelo Beneficiário (formato 0.00)
    attr_accessor :returned_value

    # Código que representa o motivo da devolução do pagamento  Domínios(Tipo de pagamento - Código - Mensagem):  Transferência - 01 - CONTA DESTINATÁRIA DO CRÉDITO ENCERRADA; Transferência - 02 - AGÊNCIA OU CONTA DESTINATÁRIA DO CRÉDITO INVÁLIDA; Transferência - 03 - AUSÊNCIA OU DIVERGÊNCIA NA INDICAÇÃO DO CPF/CNPJ ; Transferência - 04 - MENSAGEM INVÁLIDA PARA O TIPO DE TRANSAÇÃO/FINALIDADE; Transferência - 05 - DIVERGÊNCIA NA TITULARIDADE; Transferência - 06 - TRANSFERÊNCIA INSUFICIENTE PARA A FINALIDADE INDICADA; Transferência - 57 - AG/CTA OU CPF/CNPJ DESTINATÁRIO INVÁLIDO OU TRANSF. ENTRE CONTAS CONJUNTAS; Transferência - 58 - TRANSFERÊNCIA DE UMA CONTA CORRENTE PARA UMA CONTA DE POUPANÇA; Transferência - 62 - DIVERGÊNCIA CPF/CNPJ DE UM DOS TITULARES; Transferência - 66 - TRANSFERÊNCIA DE CONTA CONJUNTA PARA CONTA INDIVIDUAL OU VICE VERSA; Transferência - 67 - SEM INDICAÇÃO DO TIPO DE CONTA; Boleto - 01 - DATA DE RECEBIMENTO NÃO NUMÉRICA; Boleto - 02 - AGÊNCIA INVÁLIDA; Boleto - 03 - VALOR RECEBIDO NÃO NUMÉRICO OU IGUAL A ZERO; Boleto - 04 - LOTE NÃO NUMÉRCIO; Boleto - 05 - BANCO INVÁLIDO; Boleto - 06 - CÓDIGO MOEDA NÃO NUMÉRICO; Boleto - 07 - DV CÓDIGO DE BARRAS NÃO NUMÉRICO; Boleto - 08 - FATOR VENCIMENTO NÃO NUMÉRICO; Boleto - 09 - VALOR TÍTULO NÃO NUMÉRICO; Boleto - 10 - CAMPO LIVRE NÃO NUMÉRICO; Boleto - 11 - DV CÓDIGO DE BARRAS NÃO CONFERE; Boleto - 12 - DATA DE RECEBIMENTO INVÁLIDA; Boleto - 13 - VALOR RECEBIMENTO ACIMA DO LIMITE;
    attr_accessor :returned_code

    # Em caso de devolução parcial dos pagamentos, este campo indicará a sequência de devolução
    attr_accessor :returned_sequence

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'payment_id' => :'paymentId',
        :'payment_type' => :'paymentType',
        :'credit_type' => :'creditType',
        :'payment_date' => :'paymentDate',
        :'clearinghouse_code' => :'clearinghouseCode',
        :'ispb_code' => :'ispbCode',
        :'credit_branch_office' => :'creditBranchOffice',
        :'credit_current_account' => :'creditCurrentAccount',
        :'check_digits_credit_current_account' => :'checkDigitsCreditCurrentAccount',
        :'payment_current_account' => :'paymentCurrentAccount',
        :'payer_taxpayer_type' => :'payerTaxpayerType',
        :'payer_taxpayer_registration' => :'payerTaxpayerRegistration',
        :'beneficiary_name' => :'beneficiaryName',
        :'paid_value' => :'paidValue',
        :'numeric_bar_code' => :'numericBarCode',
        :'payment_value' => :'paymentValue',
        :'request_identification' => :'requestIdentification',
        :'debit_branch_office' => :'debitBranchOffice',
        :'debit_current_account' => :'debitCurrentAccount',
        :'check_digits_debit_current_account' => :'checkDigitsDebitCurrentAccount',
        :'credit_card_first_four_digits_start' => :'creditCardFirstFourDigitsStart',
        :'credit_card_last_four_digits_end' => :'creditCardLastFourDigitsEnd',
        :'debit_document' => :'debitDocument',
        :'returned_date' => :'returnedDate',
        :'returned_value' => :'returnedValue',
        :'returned_code' => :'returnedCode',
        :'returned_sequence' => :'returnedSequence'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'payment_id' => :'Object',
        :'payment_type' => :'Object',
        :'credit_type' => :'Object',
        :'payment_date' => :'Object',
        :'clearinghouse_code' => :'Object',
        :'ispb_code' => :'Object',
        :'credit_branch_office' => :'Object',
        :'credit_current_account' => :'Object',
        :'check_digits_credit_current_account' => :'Object',
        :'payment_current_account' => :'Object',
        :'payer_taxpayer_type' => :'Object',
        :'payer_taxpayer_registration' => :'Object',
        :'beneficiary_name' => :'Object',
        :'paid_value' => :'Object',
        :'numeric_bar_code' => :'Object',
        :'payment_value' => :'Object',
        :'request_identification' => :'Object',
        :'debit_branch_office' => :'Object',
        :'debit_current_account' => :'Object',
        :'check_digits_debit_current_account' => :'Object',
        :'credit_card_first_four_digits_start' => :'Object',
        :'credit_card_last_four_digits_end' => :'Object',
        :'debit_document' => :'Object',
        :'returned_date' => :'Object',
        :'returned_value' => :'Object',
        :'returned_code' => :'Object',
        :'returned_sequence' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `BancoBrasilPayments::RootTypeForReturnedPaymentsDetails` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `BancoBrasilPayments::RootTypeForReturnedPaymentsDetails`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'payment_id')
        self.payment_id = attributes[:'payment_id']
      end

      if attributes.key?(:'payment_type')
        self.payment_type = attributes[:'payment_type']
      end

      if attributes.key?(:'credit_type')
        self.credit_type = attributes[:'credit_type']
      end

      if attributes.key?(:'payment_date')
        self.payment_date = attributes[:'payment_date']
      end

      if attributes.key?(:'clearinghouse_code')
        self.clearinghouse_code = attributes[:'clearinghouse_code']
      end

      if attributes.key?(:'ispb_code')
        self.ispb_code = attributes[:'ispb_code']
      end

      if attributes.key?(:'credit_branch_office')
        self.credit_branch_office = attributes[:'credit_branch_office']
      end

      if attributes.key?(:'credit_current_account')
        self.credit_current_account = attributes[:'credit_current_account']
      end

      if attributes.key?(:'check_digits_credit_current_account')
        self.check_digits_credit_current_account = attributes[:'check_digits_credit_current_account']
      end

      if attributes.key?(:'payment_current_account')
        self.payment_current_account = attributes[:'payment_current_account']
      end

      if attributes.key?(:'payer_taxpayer_type')
        self.payer_taxpayer_type = attributes[:'payer_taxpayer_type']
      end

      if attributes.key?(:'payer_taxpayer_registration')
        self.payer_taxpayer_registration = attributes[:'payer_taxpayer_registration']
      end

      if attributes.key?(:'beneficiary_name')
        self.beneficiary_name = attributes[:'beneficiary_name']
      end

      if attributes.key?(:'paid_value')
        self.paid_value = attributes[:'paid_value']
      end

      if attributes.key?(:'numeric_bar_code')
        self.numeric_bar_code = attributes[:'numeric_bar_code']
      end

      if attributes.key?(:'payment_value')
        self.payment_value = attributes[:'payment_value']
      end

      if attributes.key?(:'request_identification')
        self.request_identification = attributes[:'request_identification']
      end

      if attributes.key?(:'debit_branch_office')
        self.debit_branch_office = attributes[:'debit_branch_office']
      end

      if attributes.key?(:'debit_current_account')
        self.debit_current_account = attributes[:'debit_current_account']
      end

      if attributes.key?(:'check_digits_debit_current_account')
        self.check_digits_debit_current_account = attributes[:'check_digits_debit_current_account']
      end

      if attributes.key?(:'credit_card_first_four_digits_start')
        self.credit_card_first_four_digits_start = attributes[:'credit_card_first_four_digits_start']
      end

      if attributes.key?(:'credit_card_last_four_digits_end')
        self.credit_card_last_four_digits_end = attributes[:'credit_card_last_four_digits_end']
      end

      if attributes.key?(:'debit_document')
        self.debit_document = attributes[:'debit_document']
      end

      if attributes.key?(:'returned_date')
        self.returned_date = attributes[:'returned_date']
      end

      if attributes.key?(:'returned_value')
        self.returned_value = attributes[:'returned_value']
      end

      if attributes.key?(:'returned_code')
        self.returned_code = attributes[:'returned_code']
      end

      if attributes.key?(:'returned_sequence')
        self.returned_sequence = attributes[:'returned_sequence']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          payment_id == o.payment_id &&
          payment_type == o.payment_type &&
          credit_type == o.credit_type &&
          payment_date == o.payment_date &&
          clearinghouse_code == o.clearinghouse_code &&
          ispb_code == o.ispb_code &&
          credit_branch_office == o.credit_branch_office &&
          credit_current_account == o.credit_current_account &&
          check_digits_credit_current_account == o.check_digits_credit_current_account &&
          payment_current_account == o.payment_current_account &&
          payer_taxpayer_type == o.payer_taxpayer_type &&
          payer_taxpayer_registration == o.payer_taxpayer_registration &&
          beneficiary_name == o.beneficiary_name &&
          paid_value == o.paid_value &&
          numeric_bar_code == o.numeric_bar_code &&
          payment_value == o.payment_value &&
          request_identification == o.request_identification &&
          debit_branch_office == o.debit_branch_office &&
          debit_current_account == o.debit_current_account &&
          check_digits_debit_current_account == o.check_digits_debit_current_account &&
          credit_card_first_four_digits_start == o.credit_card_first_four_digits_start &&
          credit_card_last_four_digits_end == o.credit_card_last_four_digits_end &&
          debit_document == o.debit_document &&
          returned_date == o.returned_date &&
          returned_value == o.returned_value &&
          returned_code == o.returned_code &&
          returned_sequence == o.returned_sequence
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [payment_id, payment_type, credit_type, payment_date, clearinghouse_code, ispb_code, credit_branch_office, credit_current_account, check_digits_credit_current_account, payment_current_account, payer_taxpayer_type, payer_taxpayer_registration, beneficiary_name, paid_value, numeric_bar_code, payment_value, request_identification, debit_branch_office, debit_current_account, check_digits_debit_current_account, credit_card_first_four_digits_start, credit_card_last_four_digits_end, debit_document, returned_date, returned_value, returned_code, returned_sequence].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        BancoBrasilPayments.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
